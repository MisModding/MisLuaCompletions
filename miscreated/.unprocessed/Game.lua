---autogenerated

local Game = {}
function Game.AddTacticalEntity( id,type) end

function Game.RemoveTacticalEntity( id,type) end

function Game.RegisterWithAutoAimManager( entityId, float innerRadiusFactor, float outerRadiusFactor, float snapRadiusFactor) end

function Game.UnregisterFromAutoAimManager( entityId) end

function Game.OnAmmoCrateSpawned( providesFragGrenades) end

function Game.CacheResource( whoIsRequesting, resourceName,resourceType,resourceFlags) end

function Game.CacheActorClassResources( actorEntityClassName) end

function Game.CacheEntityArchetype( archetypeName) end

function Game.ShowMainMenu() end

function Game.PauseGame( pause ) end

function Game.QueryBattleStatus() end

function Game.IsPlayer( entityId) end

function Game.RegisterVTOL( entityId) end

function Game.OnEnvironmentalWeaponHealthChanged( entityId ) end

function Game.ResetEntity( entityId ) end

function Game.SetDangerousRigidBodyDangerStatus( entityId, isDangerous, triggerPlayerId ) end

function Game.SendEventToGameObject( entityId, char* event ) end

function Game.IsMountedWeaponUsableWithTarget() end

function Game.SaveCheckpoint( checkpointId,fileName) end

function Game.LoadCheckpoint(fileName) end

function Game.QuickLoad(  ) end

function Game.QueueDeferredKill( entityId) end

function Game.CacheEquipmentPack( equipmentPackName) end

function Game.DebugDrawCylinder( float x, float y, float z, float radius, float height,r,g,b,a ) end

function Game.DebugDrawCone( float x, float y, float z, float radius, float height,r,g,b,a ) end

function Game.DebugDrawAABB( float x, float y, float z, float x, float y, float z,r,g,b,a ) end

function Game.LoadPrefabLibrary(filename ) end

function Game.SpawnPrefab( entityId,const char *libname,const char *prefabname,uint3 seed,uint3 nMaxSpawn) end

function Game.MovePrefab( entityId) end

function Game.DeletePrefab( entityId) end

function Game.HidePrefab( entityId, bHide) end

return Game
