---autogenerated

local GameAI = {}
function GameAI.RegisterWithModule( moduleName, entityID) end

function GameAI.UnregisterWithModule( moduleName, entityID) end

function GameAI.UnregisterWithAllModules( entityID) end

function GameAI.PauseModule( moduleName, entityID) end

function GameAI.PauseAllModules( entityID) end

function GameAI.ResumeModule( moduleName, entityID) end

function GameAI.ResumeAllModules( entityID) end

function GameAI.GetClosestEntityToTarget(IFunctionHandler* funcHandler, Vec3 attackerPos, Vec3 targetPos, pClassName, float radius, float maxAngle) end

function GameAI.GetBattleFrontPosition(groupID) end

function GameAI.ResetAdvantagePointOccupancyControl() end

function GameAI.OccupyAdvantagePoint( entityID, Vec3 point) end

function GameAI.ReleaseAdvantagePointFor( entityID) end

function GameAI.IsAdvantagePointOccupied( Vec3 point) end

function GameAI.StartSearchModuleFor(groupID, Vec3 targetPos) end

function GameAI.StopSearchModuleFor(groupID) end

function GameAI.MarkAssignedSearchSpotAsUnreachable( entityID) end

function GameAI.ResetRanges( entityID) end

function GameAI.AddRange( entityID, float range, enterSignal, leaveSignal) end

function GameAI.ResetAloneDetector( entityID) end

function GameAI.SetupAloneDetector( entityID, float range, aloneSignal, notAloneSignal) end

function GameAI.AddActorClassToAloneDetector( entityID, entityClassName) end

function GameAI.RemoveActorClassFromAloneDetector( entityID, entityClassName) end

function GameAI.IsAloneForAloneDetector( entityID) end

function GameAI.GetRangeState( entityID,rangeID) end

function GameAI.ChangeRange( entityID,rangeID, float distance) end

function GameAI.RegisterObjectVisible( entityID) end

function GameAI.UnregisterObjectVisible( entityID) end

function GameAI.IsAISystemEnabled() end

function GameAI.RegisterEntityForAISquadManager( entityID) end

function GameAI.RemoveEntityForAISquadManager( entityID) end

function GameAI.GetSquadId( entityId) end

function GameAI.GetSquadMembers(squadId) end

function GameAI.GetAveragePositionOfSquadScopeUsers( entityIdHandle, squadScopeName) end

function GameAI.GetSquadScopeUserCount( entityIdHandle, squadScopeName) end

function GameAI.IsSwimmingUnderwater( entityID) end

function GameAI.GetAgentTypeID( name) end

function GameAI.IsLocationValidInNavigationMesh(agentTypeID, Vec3 pos) end

return GameAI
